// Chess Los Alamos 6x6 with king capture
// -- No castling, en-passant, nor pawn double move.
// -- Check is ignored in all cases and the game ends with capturing the king.
// -- The game ends in a draw after 20 moves (40 half-moves) without moving a pawn or capturing.

#majorPieces(color) = color~Knight, color~Rook, color~Queen
#singleColorPieces(color) = color~Pawn, color~King, color~Rook, color~Knight, color~Queen

#players = white(100), black(100)
#pieces = singleColorPieces(white), singleColorPieces(black), empty
#variables = stagnation(40)

#board = rectangle(up,down,left,right,
         [blackRook, blackKnight, blackQueen, blackKing, blackKnight, blackRook]
         [blackPawn, blackPawn  , blackPawn , blackPawn, blackPawn  , blackPawn]
         [empty    , empty      , empty     , empty    , empty      , empty    ]
         [empty    , empty      , empty     , empty    , empty      , empty    ]
         [whitePawn, whitePawn  , whitePawn , whitePawn, whitePawn  , whitePawn]
         [whiteRook, whiteKnight, whiteQueen, whiteKing, whiteKnight, whiteRook])

#anySquare = (left* + right*)(up* + down*)
#anyNeighborSquare = (left + right + up + down + (left + right)(up + down))

#diagonalLine = (
        (up left {empty})* up left
      + (up right {empty})* up right
      + (down left {empty})* down left
      + (down right {empty})* down right
    )

#parallelLine = (
        (up {empty})* up
      + (down {empty})* down
      + (right {empty})* right
      + (left {empty})* left
    )

#knightHop = (
        (up^2 + down^2)(left + right)
      + (left^2 + right^2)(up + down)
    )

#captureAnyBy(capturingPiece; oppColor) = (
      {empty}
    + {singleColorPieces(oppColor)} [$ stagnation=0]
  ) [capturingPiece]

#pickUpPiece(piece) = {piece}[empty]

#standardMove(piece; movePattern; oppColor) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece; oppColor)

#knightMove(color; oppColor) = standardMove(color~Knight; knightHop; oppColor)
#queenMove(color; oppColor) = standardMove(color~Queen; (diagonalLine + parallelLine); oppColor)

#rookMove(color; oppColor) =
    pickUpPiece(color~Rook)
    parallelLine
    captureAnyBy(color~Rook; oppColor)

#standardKingMove(color; oppColor) =
    anyNeighborSquare
    captureAnyBy(color~King; oppColor)

#kingMove(forward; backward; color; oppColor) =
    pickUpPiece(color~King)
    standardKingMove(color; oppColor)

#checkForPromotion(forward; color) = (
        {? forward} [color~Pawn]
      + {! forward} [majorPieces(color)]
    )

#standardPawnMove(forward; backward; color; oppColor) =
    pickUpPiece(color~Pawn)
    (
        (
            forward {empty}
          + forward (left + right) {singleColorPieces(oppColor)}
        )
        checkForPromotion(forward; color)
    ) [$ stagnation=0]


#move(forward; backward; color; oppColor) = (
      anySquare
      (
          kingMove(forward; backward; color; oppColor)
        + rookMove(color; oppColor)
        + queenMove(color; oppColor)
        + knightMove(color; oppColor)
        + standardPawnMove(forward; backward; color; oppColor)
      )
  )

#turn(forward; backward; color; oppColor) = (
    [$ stagnation=stagnation+1]
    ->color move(forward; backward; color; oppColor)
    ->>
    (
        {$ oppColor~King > 0}
      + {$ oppColor~King == 0} [$ color=100,oppColor=0] ->> {}
    )
  )

#rules = [$ white=50,black=50] (
    turn(up;down;white;black)
    turn(down;up;black;white)
  )*
